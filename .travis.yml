language: c
sudo: false

matrix:
  include:
    - env: TASK="osx"
      os: osx
      compiler: clang
      before_install: rvm get stable
      install:
        - brew update
        - brew install python3 ninja pkg-config pcre2 portaudio; echo "done"
        - pip3 install meson
    - env: TASK="linux"
      os: linux
      dist: "trusty"
      install:
        - export PATH="`pwd`/build:${PATH}"
        - wget https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-linux.zip && unzip -q ninja-linux.zip -d build
        - pip3 install --user meson
      addons: {apt: {packages: [libasound2-dev, python3-pip, pkg-config]}, coverity_scan: {project: {name: "zeehio/mimic-core", description: "Core text to speech for mycroft"}, notification_email: sergioller@gmail.com, build_command_prepend: meson build_cov_scan --prefix="$PWD/install", build_command: ninja -C build_cov_scan test install, branch_pattern: coverity_scan}}
    - env: TASK="coverage"
      os: linux
      dist: "trusty"
      install:
        - export PATH="`pwd`/build:${PATH}"
        - wget https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-linux.zip && unzip -q ninja-linux.zip -d build
        - pip3 install --user meson
      script:
        - meson build --prefix="$PWD/install" -D b_coverage=true
        - ninja -C build test
      after_success:
        - bash <(curl -s https://codecov.io/bash)
      addons: {apt: {packages: [libasound2-dev, python3-pip, pkg-config]}}
    - env: TASK="windows"
      os: linux
      dist: "trusty"
      install:
        - export PATH="`pwd`/build:${PATH}"
        - wget https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-linux.zip && unzip -q ninja-linux.zip -d build
        - pip3 install --user meson
      script:
        - meson build --prefix="$PWD/install" --cross-file="cross/ubuntu-mingw64.txt"
        - ninja -C build install
      addons: {apt: {packages: [python3-pip, pkg-config, wine, binutils-mingw-w64-x86-64, mingw-w64-x86-64-dev, gcc-mingw-w64-x86-64]}}
    - env: TASK="armhf"
      os: linux
      dist: "trusty"
      install:
        - export PATH="`pwd`/build:${PATH}"
        - wget https://github.com/ninja-build/ninja/releases/download/v1.7.2/ninja-linux.zip && unzip -q ninja-linux.zip -d build
        - pip3 install --user meson
      script:
        - meson build --prefix="$PWD/install" --cross-file="cross/ubuntu-armhf.txt"
        - ninja -C build install
      addons: {apt: {packages: [python3-pip, pkg-config-arm-linux-gnueabihf, libc6-dev-armhf-cross, gcc-arm-linux-gnueabihf, binutils-arm-linux-gnueabihf]}}

# We don't want to pull submodules recursively
git:
  submodules: false

before_install:
  - git submodule update --init

script:
  - meson build --prefix="$PWD/install"
  - ninja -C build test install



env:
  global:
   # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
   #   via the "travis encrypt" command using the project repo's public key
   - secure: "QbdpMh43MSihNaMj/3RzsXX6PqXa0vKpyjJ1o08XQlmREJYGaAz3baPTF+Ndmppq+sDcihcsq3+ItH4s1BMCP+Ntz2Qs+GJbsPSdbZeFhXUNRlx8dsF8OFt1CbIRPjU9DElWJ/mRrIHo1r7XaheFhbcH7jQk6L5tcPqtkDiE7vhF8c19ALHm/XF00hiw2eoraMSXvic78vjqAIQniS9hHkeeF+ouIekna+k6NzIf4eyOExsmV61b1tv8uhkDEJecv//+T/X1eRJbghzSUoNfBz6ndf1YOwybfaQhhoCGfQRYuE1aqRFcgjQyQfON4m2g2l5E2XX4z2qUGgXnjI8zo0truRxMtNZHXT2uJuFifNKQGmBdlJdP5VZX2pHkx1MM1qqg8zfClPRhgZ9MsseOme5AW/MUP4hlU8u+w+5A6+PLnKkC7oAuQt9vGh+IC2sOxYIlC+ZH6U3AGE5vl2sas+13WMVMtLOPMbrkjSapoYt9oP+uvH2K6AI8bD2r2Hxsf/sxw9QrWCwvw9Bp1/13bFCbK1sF8p0c0fJCI0uSCf+RVxzApDW/KLZdLm7p6TzcY028grYatK7uVLE+MTJh85v8+S4U42veGmdQYFf9DDRN7RzZLyYEFp98tGWrOi0YhDoKOuEKRifXBu6V56HBWV/JaQdcrHgLQC852OVVuLk="


